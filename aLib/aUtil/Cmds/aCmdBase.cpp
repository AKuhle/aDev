/*******************************************************************************
* \file aCmdBase.cpp
* \author Andreas Kuhlewind
*
* \brief
*
*  Detailed description starts here.
*******************************************************************************/


/*******************************************************************************
* includes
*******************************************************************************/
#include "aCmdBase.h"



/*******************************************************************************
* namespace
*******************************************************************************/
namespace aLib {
namespace aUtil {


/*******************************************************************************
* aCmdBase::aCmdBase
*******************************************************************************/
aCmdBase::aCmdBase(s32              _s32Id,
                   const aString    &_sName,
                   enumCmdType      _eType)
: m_s32Id(_s32Id),
  m_sName(_sName),
  m_eType(_eType)
{
} // aCmdBase::aCmdBase


/*******************************************************************************
* aCmdBase::~aCmdBase
*******************************************************************************/
aCmdBase::~aCmdBase()
{
} // aCmdBase::~aCmdBase


/*******************************************************************************
* aCmdBase::setCmdMgr
*******************************************************************************/
void aCmdBase::setCmdMgr(aCmdMgr* _pCmdMgr)
{
    m_pCmdMgr = _pCmdMgr;
} // aCmdBase::setCmdMgr


/*******************************************************************************
* aCmdBase::cmdMgr
*******************************************************************************/
aCmdMgr* aCmdBase::cmdMgr() const
{
    return m_pCmdMgr;
} // aCmdBase::cmdMgr


/*******************************************************************************
* aCmdBase::id
*******************************************************************************/
s32 aCmdBase::id() const
{
    return m_s32Id;
} // aCmdBase::id


/*******************************************************************************
* aCmdBase::name
*******************************************************************************/
const aString& aCmdBase::name() const
{
    return m_sName;
} // aCmdBase::CmdName


/*******************************************************************************
* aCmdBase::type
*******************************************************************************/
enumCmdType aCmdBase::type() const
{
    return m_eType;
} // aCmdBase::type


/*******************************************************************************
* aCmdBase::setType
*******************************************************************************/
void aCmdBase::setType(enumCmdType _eType)
{
    m_eType = _eType;
} // aCmdBase::setType


/*******************************************************************************
* aCmdBase::canUndo
*******************************************************************************/
bool aCmdBase::canUndo() const
{
    return (m_eType == enumCmdType::CMD_TYPE_UNDO);
} // aCmdBase::canUndo


} // namespace aUtil
} // namespace aLib
