#include <QtNetwork/QUdpSocket>
#include <QByteArray>
#include <QHostAddress>
#include <iostream>

constexpr quint16 ARTNET_PORT = 200; // Zielport
constexpr quint8 DMX_UNIVERSE = 3;  // Universum
constexpr quint16 DMX_CHANNEL = 4; // DMX-Kanal (1-basiert)
constexpr quint8 DMX_VALUE = 166;  // Wert, der gesendet werden soll

int main() {
    QUdpSocket udpSocket;

    // Zieladresse und Port
    QHostAddress targetAddress("10.1.2.3");

    // Art-Net Header
    QByteArray artnetPacket;
    artnetPacket.append("Art-Net"); // Protokollkennung
    artnetPacket.append('\0');      // Nullterminierung
    artnetPacket.append(0x00);      // OpCode (Low Byte)
    artnetPacket.append(0x50);      // OpCode (High Byte) -> ArtDMX
    artnetPacket.append(0x00);      // Protokollversion (High Byte)
    artnetPacket.append(0x0E);      // Protokollversion (Low Byte)
    artnetPacket.append(0x00);      // Sequence (0 = keine Synchronisation)
    artnetPacket.append(0x00);      // Physical (nicht verwendet)
    artnetPacket.append(DMX_UNIVERSE & 0xFF);       // Universum (Low Byte)
    artnetPacket.append((DMX_UNIVERSE >> 8) & 0xFF); // Universum (High Byte)
    artnetPacket.append(0x02);      // DMX-Datenlänge (High Byte)
    artnetPacket.append(0x00);      // DMX-Datenlänge (Low Byte)

    // DMX-Daten (512 Kanäle, initialisiert mit 0)
    QByteArray dmxData(512, 0);
    dmxData[DMX_CHANNEL - 1] = DMX_VALUE; // Setze den Wert für Kanal 4

    // Füge DMX-Daten zum Paket hinzu
    artnetPacket.append(dmxData);

    // Senden des Pakets
    qint64 bytesSent = udpSocket.writeDatagram(artnetPacket, targetAddress, ARTNET_PORT);

    if (bytesSent == -1) {
        std::cerr << "Fehler beim Senden des Pakets: " << udpSocket.errorString().toStdString() << std::endl;
    } else {
        std::cout << "Art-Net-Paket erfolgreich gesendet. Bytes gesendet: " << bytesSent << std::endl;
    }

    return 0;
}