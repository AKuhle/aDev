#include <QtWidgets/QApplication>
#include <QtWidgets/QMainWindow>
#include <QtWidgets/QVBoxLayout>
#include <QtWidgets/QLineEdit>
#include <QtWidgets/QPushButton>
#include <QtWidgets/QTextEdit>
#include <QtWidgets/QLabel>
#include <QtWidgets/QFileDialog>
#include <QJsonDocument>
#include <QJsonObject>
#include <QJsonArray>
#include <QJsonValue>
#include <QFile>
#include <QDebug>
#include <QMessageBox>
#include <QDir>

class JsonReader : public QMainWindow
{
    Q_OBJECT

public:
    JsonReader(QWidget *parent = nullptr) : QMainWindow(parent)
    {
        setupUI();
        createSampleJsonFile();
    }

private slots:
    void loadJsonFile();
    void searchValue();

private:
    void setupUI();
    void createSampleJsonFile();
    QJsonValue searchInJson(const QJsonValue &value, const QString &key);
    QJsonValue searchInJsonRecursive(const QJsonValue &value, const QString &key);
    void displaySearchResult(const QJsonValue &result, const QString &searchKey);
    
    QJsonDocument m_jsonDoc;
    QLineEdit *m_searchEdit;
    QTextEdit *m_resultText;
    QTextEdit *m_jsonDisplay;
    QPushButton *m_loadButton;
    QPushButton *m_searchButton;
};

void JsonReader::setupUI()
{
    QWidget *centralWidget = new QWidget(this);
    setCentralWidget(centralWidget);
    
    QVBoxLayout *layout = new QVBoxLayout(centralWidget);
    
    // JSON laden
    m_loadButton = new QPushButton("JSON Datei laden", this);
    connect(m_loadButton, &QPushButton::clicked, this, &JsonReader::loadJsonFile);
    layout->addWidget(m_loadButton);
    
    // JSON Anzeige
    layout->addWidget(new QLabel("JSON Inhalt:"));
    m_jsonDisplay = new QTextEdit(this);
    m_jsonDisplay->setMaximumHeight(200);
    layout->addWidget(m_jsonDisplay);
    
    // Suche
    layout->addWidget(new QLabel("Nach Schlüssel suchen:"));
    m_searchEdit = new QLineEdit(this);
    m_searchEdit->setPlaceholderText("z.B. name, age, city.street");
    layout->addWidget(m_searchEdit);
    
    m_searchButton = new QPushButton("Suchen", this);
    connect(m_searchButton, &QPushButton::clicked, this, &JsonReader::searchValue);
    layout->addWidget(m_searchButton);
    
    // Ergebnis
    layout->addWidget(new QLabel("Suchergebnis:"));
    m_resultText = new QTextEdit(this);
    m_resultText->setMaximumHeight(150);
    layout->addWidget(m_resultText);
    
    setWindowTitle("Qt JSON Reader");
    resize(600, 500);
}

void JsonReader::createSampleJsonFile()
{
    // Beispiel JSON-Datei erstellen
    QJsonObject rootObject;
    
    // Einfache Werte
    rootObject["name"] = "Max Mustermann";
    rootObject["age"] = 30;
    rootObject["active"] = true;
    
    // Array
    QJsonArray hobbies;
    hobbies.append("Lesen");
    hobbies.append("Programmieren");
    hobbies.append("Sport");
    rootObject["hobbies"] = hobbies;
    
    // Verschachteltes Objekt
    QJsonObject address;
    address["street"] = "Musterstraße 123";
    address["city"] = "Berlin";
    address["zipcode"] = "10115";
    rootObject["address"] = address;
    
    // Array mit Objekten
    QJsonArray contacts;
    QJsonObject contact1;
    contact1["type"] = "email";
    contact1["value"] = "max@example.com";
    contacts.append(contact1);
    
    QJsonObject contact2;
    contact2["type"] = "phone";
    contact2["value"] = "+49 123 456789";
    contacts.append(contact2);
    rootObject["contacts"] = contacts;
    
    // Verschachteltes komplexes Objekt
    QJsonObject work;
    QJsonObject company;
    company["name"] = "Tech Corp";
    company["department"] = "IT";
    work["company"] = company;
    work["position"] = "Software Developer";
    work["salary"] = 75000;
    rootObject["work"] = work;
    
    QJsonDocument doc(rootObject);
    
    // In Datei speichern
    QFile file("sample.json");
    if (file.open(QIODevice::WriteOnly)) {
        file.write(doc.toJson());
        file.close();
        qDebug() << "Beispiel JSON-Datei erstellt: sample.json";
    }
}

void JsonReader::loadJsonFile()
{
    QString fileName = QFileDialog::getOpenFileName(this, 
        "JSON Datei öffnen", 
        QDir::currentPath(),
        "JSON Files (*.json);;All Files (*)");
    
    if (fileName.isEmpty()) return;
    
    QFile file(fileName);
    if (!file.open(QIODevice::ReadOnly)) {
        QMessageBox::warning(this, "Fehler", 
            "Konnte Datei nicht öffnen: " + file.errorString());
        return;
    }
    
    QByteArray jsonData = file.readAll();
    file.close();
    
    QJsonParseError parseError;
    m_jsonDoc = QJsonDocument::fromJson(jsonData, &parseError);
    
    if (parseError.error != QJsonParseError::NoError) {
        QMessageBox::warning(this, "JSON Fehler", 
            "JSON Parse Fehler: " + parseError.errorString());
        return;
    }
    
    // JSON formatiert anzeigen
    m_jsonDisplay->setText(m_jsonDoc.toJson(QJsonDocument::Indented));
    
    QMessageBox::information(this, "Erfolg", 
        "JSON Datei erfolgreich geladen!");
}

void JsonReader::searchValue()
{
    if (m_jsonDoc.isEmpty()) {
        QMessageBox::warning(this, "Warnung", 
            "Bitte laden Sie zuerst eine JSON-Datei!");
        return;
    }
    
    QString searchKey = m_searchEdit->text().trimmed();
    if (searchKey.isEmpty()) {
        QMessageBox::warning(this, "Warnung", 
            "Bitte geben Sie einen Suchbegriff ein!");
        return;
    }
    
    // Suche starten
    QJsonValue result = searchInJsonRecursive(m_jsonDoc.object(), searchKey);
    displaySearchResult(result, searchKey);
}

QJsonValue JsonReader::searchInJson(const QJsonValue &value, const QString &key)
{
    // Einfache Suche - nur auf oberster Ebene
    if (value.isObject()) {
        QJsonObject obj = value.toObject();
        if (obj.contains(key)) {
            return obj.value(key);
        }
    }
    return QJsonValue();
}

QJsonValue JsonReader::searchInJsonRecursive(const QJsonValue &value, const QString &key)
{
    // Verschachtelte Suche - durchsucht alle Ebenen
    if (value.isObject()) {
        QJsonObject obj = value.toObject();
        
        // Direkte Suche auf aktueller Ebene
        if (obj.contains(key)) {
            return obj.value(key);
        }
        
        // Verschachtelte Suche mit Punkt-Notation (z.B. "address.street")
        if (key.contains('.')) {
            QStringList keyParts = key.split('.');
            QString currentKey = keyParts.first();
            QString remainingKey = keyParts.mid(1).join('.');
            
            if (obj.contains(currentKey)) {
                return searchInJsonRecursive(obj.value(currentKey), remainingKey);
            }
        }
        
        // Rekursive Suche in allen Objekten
        for (auto it = obj.begin(); it != obj.end(); ++it) {
            QJsonValue found = searchInJsonRecursive(it.value(), key);
            if (!found.isNull()) {
                return found;
            }
        }
    }
    else if (value.isArray()) {
        QJsonArray arr = value.toArray();
        for (const QJsonValue &item : arr) {
            QJsonValue found = searchInJsonRecursive(item, key);
            if (!found.isNull()) {
                return found;
            }
        }
    }
    
    return QJsonValue();
}

void JsonReader::displaySearchResult(const QJsonValue &result, const QString &searchKey)
{
    QString resultText;
    
    if (result.isNull()) {
        resultText = QString("Schlüssel '%1' nicht gefunden!").arg(searchKey);
    }
    else {
        resultText = QString("Gefunden für '%1':\n\n").arg(searchKey);
        
        if (result.isString()) {
            resultText += QString("String: \"%1\"").arg(result.toString());
        }
        else if (result.isDouble()) {
            resultText += QString("Zahl: %1").arg(result.toDouble());
        }
        else if (result.isBool()) {
            resultText += QString("Boolean: %1").arg(result.toBool() ? "true" : "false");
        }
        else if (result.isArray()) {
            resultText += "Array:\n";
            QJsonArray arr = result.toArray();
            for (int i = 0; i < arr.size(); ++i) {
                QJsonValue item = arr[i];
                if (item.isString()) {
                    resultText += QString("  [%1]: \"%2\"\n").arg(i).arg(item.toString());
                } else {
                    resultText += QString("  [%1]: %2\n").arg(i).arg(QJsonDocument(QJsonArray{item}).toJson(QJsonDocument::Compact));
                }
            }
        }
        else if (result.isObject()) {
            resultText += "Objekt:\n";
            QJsonDocument doc(result.toObject());
            resultText += doc.toJson(QJsonDocument::Indented);
        }
    }
    
    m_resultText->setText(resultText);
}

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    
    JsonReader window;
    window.show();
    
    return app.exec();
}

#include "qt_json_reader.moc"
