/*******************************************************************************
* \file aPoint.inl
* \author Andreas Kuhlewind
*
* \brief
*
* $Revision: 69 $
* $LastChangedDate: 2010-08-17 14:10:45 +0200 (Di, 17 Aug 2010) $
* $LastChangedBy: akuhlewi $
*
*  Detailed description starts here.
*******************************************************************************/


/*******************************************************************************
* includes
*******************************************************************************/
#include "aFrame_def.h"
#include "aUtil_def.h"
#include "aHelper.h"

#include "aPoint.h"


/*******************************************************************************
* namespace
*******************************************************************************/
namespace aFrame {
namespace aUtil {


/*******************************************************************************
* aPoint::aPoint
*******************************************************************************/
aPoint::aPoint()
{
} // aPoint::aPoint


/*******************************************************************************
* aPoint::aPoint
*******************************************************************************/
aPoint::aPoint(const aPoint &_rhs)
: m_x(_rhs.m_x),
  m_y(_rhs.m_y)
{
} // aPoint::aPoint


/*******************************************************************************
* aPoint::aPoint
*******************************************************************************/
aPoint::aPoint(s32  _x,
               s32  _y)
: m_x(_x),
  m_y(_y)
{
} // aPoint::aPoint


/*******************************************************************************
* aPoint::~aPoint
*******************************************************************************/
aPoint::~aPoint()
{
} // aPoint::~aPoint


/*******************************************************************************
* aPoint::set
*******************************************************************************/
void aPoint::set(s32    _x,
                 s32    _y)
{
    m_x = _x;
    m_y = _y;
} // aPoint::set


/*******************************************************************************
* aPoint::operator=
*******************************************************************************/
aPoint& aPoint::operator=(const aPoint &_rhs)
{
    // avoid selfcopy
    m_x = _rhs.m_x;
    m_y = _rhs.m_y;

    return *this;
} // aPoint::operator=


/*******************************************************************************
* aPoint::operator==
*******************************************************************************/
bool aPoint::operator==(const aPoint	&_rhs) const
{
    return isEqual(m_x, _rhs.m_x) &&
           isEqual(m_y, _rhs.m_y);
} // aPoint::operator==


/*******************************************************************************
* aPoint::operator!=
*******************************************************************************/
bool aPoint::operator!=(const aPoint	&_rhs) const
{
    return isUnequal(m_x, _rhs.m_x) ||
           isUnequal(m_y, _rhs.m_y);
} // aPoint::operator!=



} // namespace aUtil
} // namespace aFrame
